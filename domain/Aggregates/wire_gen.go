// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package Aggregates

import (
	"github.com/peifengll/task-rebot/domain/service"
	"github.com/peifengll/task-rebot/domain/subscribe"
	"github.com/peifengll/task-rebot/domain/task"
	"github.com/peifengll/task-rebot/domain/user"
	"github.com/peifengll/task-rebot/infra/component/mysql/ingorm"
	"github.com/peifengll/task-rebot/infra/converter"
	"github.com/peifengll/task-rebot/infra/persistence/dao"
	"github.com/peifengll/task-rebot/infra/repositoryImpl"
)

// Injectors from wire.go:

func NewServiceRepo() service.ServiceRepo {
	db := ingorm.ProviderOnceGormDB()
	serviceDao := dao.NewServiceDao(db)
	serviceConverter := converter.NewServiceConverter()
	serviceRepo := repositoryImpl.NewServiceRepo(serviceDao, serviceConverter)
	return serviceRepo
}

func NewTaskRepo() task.TaskRepo {
	db := ingorm.ProviderOnceGormDB()
	taskDao := dao.NewTaskDao(db)
	taskConverter := converter.NewTaskConverter()
	taskRepo := repositoryImpl.NewTaskRepo(taskDao, taskConverter)
	return taskRepo
}

func NewSubscribeRepo() subscribe.SubscribeRepo {
	db := ingorm.ProviderOnceGormDB()
	subscribeDao := dao.NewSubscribeDao(db)
	subscribeConverter := converter.NewSubscribeConverter()
	subscribeRepo := repositoryImpl.NewSubscribeRepo(subscribeDao, subscribeConverter)
	return subscribeRepo
}

func NewUserRepo() user.UserRepo {
	db := ingorm.ProviderOnceGormDB()
	userDao := dao.NewUserDao(db)
	userConverter := converter.NewUserConverter()
	userRepo := repositoryImpl.NewUserRepo(userDao, userConverter)
	return userRepo
}
